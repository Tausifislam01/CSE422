# -*- coding: utf-8 -*-
"""21201535_MD. Tausif-Ul-Islam_CSE422_06_Lab_Assignment02_Summer2024

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fj2ZuqHBg8RgMhpTXYbyCpP93Ibi6VgN
"""

#Task01
import random

def make_chromosome(n,t):
    population =[]
    for j in range(10):
        chromosome = ""
        for i in range(n*t):
            chromosome+=random.choice("01")
        population+=[chromosome]
        chromosome = ""
    return population

def fitness(chrom, n, t):
    arr = [0]*n
    overlap = 0
    con = 0
    for i in range(0,t*n,n):
        slot = chrom[i:i+n]
        count = 0
        for j in slot:
            if j=="1":
                count+=1
        if count>1:
            overlap+=count-1
        for k in range(n):
            if slot[k]=="1":
                arr[k]+=1

    for m in arr:
        con+=abs(m-1)
    total = overlap+con
    total = -total
    return total

def parent_selection(population, fitness_val):
    parents = []
    min_fitness = min(fitness_val)
    fit = []
    for i in fitness_val:
        fit+=[i-min_fitness]
    for i in range(2):
        parents+=random.choices(population, weights = fit)
    return parents

def crossover(parent1, parent2):
    index = random.randint(1, len(parent1) - 1)
    child1 = parent1[:index] + parent2[index:]
    child2 = parent2[:index] + parent1[index:]
    return [child1, child2]

def mutate(childstr):
    child = list(childstr)
    index = index = random.randint(1, len(child) - 1)
    if child[index]=="0":
        child[index]="1"
    else:
        child[index]="0"
    return str(child)

def GA(n,t):
    population = make_chromosome(n,t)
    target_fitness = float("-inf")
    target_chrom = None
    for i in range(1000):
        fitnesses = []
        for chrom in population:
            fitnesses+=[fitness(chrom, n,t)]
        max_fit = max(fitnesses)
        if max_fit>target_fitness:
            target_fitness=max_fit
            index = fitnesses.index(max_fit)
            target_chrom = population[index]
        next_generation = population[:2]
        while len(next_generation) < 10:
            parent1, parent2 = parent_selection(population, fitnesses)
            child1, child2 = crossover(parent1, parent2)
            next_generation+=[mutate(child1), mutate(child2)]
        population = next_generation

        return target_chrom, target_fitness

test = open("/content/21201535_MD.Tausif-Ul-Islam_CSE422_06_Lab_Assignment02_InputFile_Summer2024.txt")

inp = test.readline().split()
inp1 = tuple(inp)
a,b = inp1
N = int(a)
T = int(b)
courses = []
for i in range(int(N)):
    a = test.readline()
    courses+=[a]
chromosome, fit = GA(N, T)
print("Best Chromosome:", chromosome)
print("Best Fitness:", fit)

#Task02
def two_point_cross(parent1, parent2):
    point1 = random.randint(1, len(parent1) - 2)
    point2 = random.randint(point1 + 1, len(parent1) - 1)
    child1 = parent1[:point1] + parent2[point1:point2] + parent1[point2:]
    child2 = parent2[:point1] + parent1[point1:point2] + parent2[point2:]
    return child1, child2

population = make_chromosome(N, T)
fitness_val = []
for chromosome in population:
    fitness_val.append(fitness(chromosome, N, T))
parent1, parent2 = parent_selection(population, fitness_val)
child1, child2 = two_point_cross(parent1, parent2)
print("Parent1:", parent1)
print("Parent2:", parent2)
print("Offspring1:", child1)
print("Offspring2:", child2)

