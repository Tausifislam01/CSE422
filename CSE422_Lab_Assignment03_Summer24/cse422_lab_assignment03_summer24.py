# -*- coding: utf-8 -*-
"""21201535_MD. Tausif-Ul-Islam_CSE422_06_Lab_Assignment03_Summer24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U19FqeMl-UXzK87viXVwnGeZ61GRr1X3
"""

import random

SCORPION = 0
SUB_ZERO = 1

def alpha_beta_pruning_func(depth, leaf_nodes, node_index, is_max, alpha, beta, depth1):

    if depth == depth1:
        return leaf_nodes[node_index]

    if is_max:
        max_output = float('-inf')
        for i in range(2):
            output = alpha_beta_pruning_func(depth + 1, leaf_nodes, node_index * 2 + i, False, alpha, beta, depth1)
            max_output = max(max_output, output)
            alpha = max(alpha, output)
            if beta <= alpha:
                break
        return max_output

    else:
        min_output = float('inf')
        for i in range(2):
            output = alpha_beta_pruning_func(depth + 1, leaf_nodes, node_index * 2 + i, True, alpha, beta, depth1)
            min_output = min(min_output, output)
            beta = min(beta, output)
            if beta <= alpha:
                break
        return min_output


def generate_random_leaf_nodes():

    depth = random.randint(2, 5)
    n = 2**depth
    tree = []
    for i in range(n):
        tree+=[random.choice([-1, 1])]
    #print(tree)
    return tree, depth

def play_game(starter):
    rounds_played = 0
    present_player = starter
    round_winners = []

    for round in range(3):

        rounds_played += 1
        l1 = list(generate_random_leaf_nodes())
        leaf_nodes = l1[0]
        depth1 = l1[1]

        if present_player == SUB_ZERO:
            find_bestoutput = alpha_beta_pruning_func(0, leaf_nodes, 0, True, float('-inf'), float('inf'), depth1)
        else:
            find_bestoutput = alpha_beta_pruning_func(0, leaf_nodes, 0, False, float('-inf'), float('inf'), depth1)


        if find_bestoutput == 1:
            round_winner = "Sub-Zero"
        else:
            round_winner = "Scorpion"

        round_winners+=[round_winner]


        if present_player == SUB_ZERO:
            present_player = SCORPION
        else:
            present_player = SUB_ZERO


    scorpion_won = 0
    sub_zero_won = 0
    for i in range(len(round_winners)):
        if round_winners[i]=="Scorpion":
            scorpion_won+=1
        else:
            sub_zero_won+=1

    if scorpion_won > sub_zero_won:
        game_winner = "Scorpion"
    else:
        game_winner = "Sub-Zero"

    return game_winner, rounds_played, round_winners


starter = int(input("Enter the starting player (0 for Scorpion, 1 for Sub-Zero): "))
final_output = list(play_game(starter))
game_winner = final_output[0]
total_rounds = final_output[1]
round_winners = final_output[2]

print(f"Game Winner: {game_winner}")
print(f"Total Rounds Played: {total_rounds}")

r = 1

for winner in round_winners:
    print(f"Winner of Round {r}: {winner}")
    r+=1

def alpha_beta_pruning_func(depth, leaf_nodes, node_index, is_max, alpha, beta, depth1):

    if depth == depth1:
        return leaf_nodes[node_index]

    if is_max:
        max_output = float('-inf')
        for i in range(2):
            output = alpha_beta_pruning_func(depth + 1, leaf_nodes, node_index * 2 + i, False, alpha, beta, depth1)
            max_output = max(max_output, output)
            alpha = max(alpha, output)
            if beta <= alpha:
                break
        return max_output

    else:
        min_output = float('inf')
        for i in range(2):
            output = alpha_beta_pruning_func(depth + 1, leaf_nodes, node_index * 2 + i, True, alpha, beta, depth1)
            min_output = min(min_output, output)
            beta = min(beta, output)
            if beta <= alpha:
                break
        return min_output


def pacman_game(c):
    leaf_nodes = [3, 6, 2, 3, 7, 1, 2, 0]
    left = []
    right = []
    for i in range(len(leaf_nodes)):
        if i<(len(leaf_nodes)/2):
            left+=[leaf_nodes[i]]
        else:
            right+=[leaf_nodes[i]]

    without_magic = alpha_beta_pruning_func(0,  leaf_nodes, 0, True, float('-inf'), float('inf'), 3)
    left_subtree = max(left)
    #print(left_subtree)
    right_subtree = max(right)
    #print(right_subtree)

    with_magic_left = left_subtree - c
    with_magic_right = right_subtree - c

    if with_magic_left > without_magic and with_magic_left >= with_magic_right:
        print(f"The new minimax value is {with_magic_left}. Pacman goes left and uses dark magic")
    elif with_magic_right > without_magic:
        print(f"The new minimax value is {with_magic_right}. Pacman goes right and uses dark magic")
    else:
        print(f"The minimax value is {without_magic}. Pacman does not use dark magic")

inp = int(input())
pacman_game(inp)